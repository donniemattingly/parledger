[{"/Users/donnie/code/parledger/src/index.js":"1","/Users/donnie/code/parledger/src/App.js":"2","/Users/donnie/code/parledger/src/reportWebVitals.js":"3","/Users/donnie/code/parledger/src/TestComponent.js":"4","/Users/donnie/code/parledger/src/pages/LoginPage.js":"5","/Users/donnie/code/parledger/src/theme.js":"6","/Users/donnie/code/parledger/src/components/AppContainer.js":"7","/Users/donnie/code/parledger/src/pages/SignUpPage.js":"8","/Users/donnie/code/parledger/src/pages/UserInfoPage.js":"9","/Users/donnie/code/parledger/src/components/PrivateRoute.js":"10","/Users/donnie/code/parledger/src/components/Home.js":"11","/Users/donnie/code/parledger/src/pages/HomePage.js":"12","/Users/donnie/code/parledger/src/components/Feed.js":"13","/Users/donnie/code/parledger/src/pages/JoinGroupPage.js":"14","/Users/donnie/code/parledger/src/pages/NewWagerPage.js":"15","/Users/donnie/code/parledger/src/components/PulseSpinner.js":"16","/Users/donnie/code/parledger/src/stores/store.js":"17","/Users/donnie/code/parledger/src/stores/wagers.js":"18","/Users/donnie/code/parledger/src/components/SelectOpponent.js":"19","/Users/donnie/code/parledger/src/components/SelectEvent.js":"20","/Users/donnie/code/parledger/src/components/SportSelect.js":"21","/Users/donnie/code/parledger/src/components/SplashScreen.js":"22","/Users/donnie/code/parledger/src/components/PersonalWagers.js":"23","/Users/donnie/code/parledger/src/styles.js":"24","/Users/donnie/code/parledger/src/stores/users.js":"25","/Users/donnie/code/parledger/src/components/ProposeCustomWager.js":"26","/Users/donnie/code/parledger/src/components/ManageWager.js":"27","/Users/donnie/code/parledger/src/components/ConfirmWagerProposal.js":"28","/Users/donnie/code/parledger/src/components/SelectWagerType.js":"29","/Users/donnie/code/parledger/src/hooks.js":"30"},{"size":500,"mtime":1608599661043,"results":"31","hashOfConfig":"32"},{"size":4352,"mtime":1610669634187,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1608165066404,"results":"34","hashOfConfig":"32"},{"size":417,"mtime":1608171558541,"results":"35","hashOfConfig":"32"},{"size":1587,"mtime":1609597291044,"results":"36","hashOfConfig":"32"},{"size":2581,"mtime":1609162633781,"results":"37","hashOfConfig":"32"},{"size":2128,"mtime":1609818373163,"results":"38","hashOfConfig":"32"},{"size":1540,"mtime":1609818373167,"results":"39","hashOfConfig":"32"},{"size":391,"mtime":1609526395951,"results":"40","hashOfConfig":"32"},{"size":1475,"mtime":1609430328630,"results":"41","hashOfConfig":"32"},{"size":215,"mtime":1608222572390,"results":"42","hashOfConfig":"32"},{"size":110,"mtime":1608602463336,"results":"43","hashOfConfig":"32"},{"size":368,"mtime":1609818373164,"results":"44","hashOfConfig":"32"},{"size":3437,"mtime":1609539646986,"results":"45","hashOfConfig":"32"},{"size":1004,"mtime":1609818373167,"results":"46","hashOfConfig":"32"},{"size":709,"mtime":1609261303486,"results":"47","hashOfConfig":"32"},{"size":2640,"mtime":1610672385781,"results":"48","hashOfConfig":"32"},{"size":4864,"mtime":1610676093032,"results":"49","hashOfConfig":"32"},{"size":3911,"mtime":1610156234526,"results":"50","hashOfConfig":"32"},{"size":7139,"mtime":1610670497328,"results":"51","hashOfConfig":"32"},{"size":2525,"mtime":1610676609999,"results":"52","hashOfConfig":"32"},{"size":781,"mtime":1609538549960,"results":"53","hashOfConfig":"32"},{"size":11431,"mtime":1610160349038,"results":"54","hashOfConfig":"32"},{"size":514,"mtime":1609818373168,"results":"55","hashOfConfig":"32"},{"size":184,"mtime":1610672550029,"results":"56","hashOfConfig":"32"},{"size":6964,"mtime":1610159979939,"results":"57","hashOfConfig":"32"},{"size":1639,"mtime":1609818373164,"results":"58","hashOfConfig":"32"},{"size":7223,"mtime":1610159958256,"results":"59","hashOfConfig":"32"},{"size":1484,"mtime":1610157775409,"results":"60","hashOfConfig":"32"},{"size":758,"mtime":1610675493586,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1j8il7e",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"64"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"64"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"64"},"/Users/donnie/code/parledger/src/index.js",[],["140","141"],"/Users/donnie/code/parledger/src/App.js",[],"/Users/donnie/code/parledger/src/reportWebVitals.js",[],"/Users/donnie/code/parledger/src/TestComponent.js",["142","143"],"/Users/donnie/code/parledger/src/pages/LoginPage.js",["144","145"],"import {isLoaded, isEmpty, useFirebase} from \"react-redux-firebase\";\nimport {useStoreState} from \"easy-peasy\";\nimport {Redirect, useHistory} from 'react-router-dom';\nimport {StyledFirebaseAuth} from \"react-firebaseui\";\nimport {JoinGroupPage} from \"./JoinGroupPage\";\nimport React, {useState} from \"react\";\nimport {authProviderIds} from \"../stores/store\";\n\n// Configure FirebaseUI.\n\n\n\nexport function LoginPage({signup}) {\n    const firebase = useFirebase()\n    const auth = useStoreState(state => state.firebase.auth)\n    const [authLoaded, setAuthLoaded] = useState(false);\n    const history = useHistory();\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        signInOptions: authProviderIds,\n        callbacks: {\n            signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n                firebase.handleRedirectResult(authResult).then(() => {\n                    console.log('logged in');\n                    setAuthLoaded(true);\n                });\n                return false;\n            },\n        },\n    };\n\n    return (\n        <div>\n            <div>\n                {\n                    !isLoaded(auth)\n                        ? <span>Loading...</span>\n                        : isEmpty(auth)\n                        ? <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n                        : signup\n                            ? <JoinGroupPage/>\n                            : <Redirect to={{pathname: \"/home\",}}/>\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/donnie/code/parledger/src/theme.js",[],"/Users/donnie/code/parledger/src/components/AppContainer.js",["146"],"import React from \"react\";\nimport {useStoreState} from \"easy-peasy\";\nimport {isEmpty, useFirebase} from \"react-redux-firebase\";\nimport {Link, useHistory} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\nconst AppHeader = styled.div`\n  padding: 0.5em;\n  height: 3em;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  \n  background: linear-gradient(to bottom, #FFFFFF00, #FFFFFF09);\n  border-bottom: 1px solid #FFFFFF2F;\n`\n\nconst LoggedInMenu = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n`\nconst headerLinkStyles = css`\n  margin: 0.4em;\n  padding-bottom: 0.1em;\n\n  :hover {\n    border-bottom: 0.1em white solid;\n  }\n`\nconst AppHeaderLink = styled(Link)`\n  ${headerLinkStyles};\n`\n\nconst AppHeaderAnchor = styled.a`\n  ${headerLinkStyles};\n`\n\nconst AppBody = styled.div`\n  padding: 1em;\n  \n  @media(max-width: 450px){\n    padding: 0;\n  }\n`\n\nexport const AppContainer = (props) => {\n    const auth = useStoreState(state => state.firebase.auth);\n    const profile = useStoreState(state => state.firebase.profile);\n    const firebase = useFirebase();\n    const history = useHistory();\n\n    const logOut = async () => {\n        await firebase.logout();\n        history.push('/')\n    }\n\n    return (<React.Fragment>\n        <AppHeader>\n            <h3>\n                <Link to={isEmpty(auth) ? '/': '/home'}>\n                        ledger.bet\n                </Link>\n            </h3>\n            <LoggedInMenu>\n                {isEmpty(auth)\n                    ? <AppHeaderLink to='/login'>\n                        Log In\n                    </AppHeaderLink>\n                    : <React.Fragment>\n                        <AppHeaderLink to=\"/wagers/new\">\n                            Make a Wager\n                        </AppHeaderLink>\n                        <AppHeaderAnchor onClick={logOut}> Sign Out </AppHeaderAnchor>\n                    </React.Fragment>\n                }\n            </LoggedInMenu>\n        </AppHeader>\n        <AppBody>\n            {props.children}\n        </AppBody>\n    </React.Fragment>)\n}\n","/Users/donnie/code/parledger/src/pages/SignUpPage.js",[],"/Users/donnie/code/parledger/src/pages/UserInfoPage.js",["147"],"import {useStoreState} from \"easy-peasy\";\nimport {useFirestoreConnect} from \"react-redux-firebase\";\n\nexport const UserInfoPage = () => {\n    useFirestoreConnect([{collectionGroup: \"wagers\"}]);\n    const profile = useStoreState(state => state.firebase.profile)\n    const results = useStoreState(state => state.firestore.data.wagers)\n\n    return <pre>{JSON.stringify(results, null, 2)}</pre>\n}","/Users/donnie/code/parledger/src/components/PrivateRoute.js",[],"/Users/donnie/code/parledger/src/components/Home.js",[],["148","149"],"/Users/donnie/code/parledger/src/pages/HomePage.js",[],"/Users/donnie/code/parledger/src/components/Feed.js",["150","151","152"],"import {useFirestoreConnect} from \"react-redux-firebase\";\nimport {useStoreState} from \"easy-peasy\";\nimport {GroupWagers, PersonalWagers, useGroupWagers} from \"./PersonalWagers\";\nimport {AppCell} from \"../pages/NewWagerPage\";\n\nexport const Feed = () => {\n    return (\n        <AppCell>\n            <PersonalWagers/>\n            <GroupWagers/>\n        </AppCell>\n    )\n}","/Users/donnie/code/parledger/src/pages/JoinGroupPage.js",["153","154","155"],"import React, {useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport styled from 'styled-components';\n\nimport {useStoreActions, useStoreState} from \"easy-peasy\";\nimport {Link, useParams} from \"react-router-dom\"\nimport {isEmpty, useFirebase} from \"react-redux-firebase\";\nimport {InlineLink} from \"../styles\";\nimport {SignUpButton, SignUpPage} from \"./SignUpPage\";\nimport {EventCell} from \"../components/SelectEvent\";\nimport {AppCell} from \"./NewWagerPage\";\n\n\nexport const ErrorMessage = styled.span`\n  color: #800000;\n`\n\nconst JoinCodeInput = styled.input`\n  font-size: 1.17em;\n  padding: 0.3em;\n  box-shadow: 3px 3px 25px #0000001C;\n  border: 0.3em;\n  \n  width: 80%;\n  min-height: 40px;\n  background: white;\n  margin-top: 0.5em;\n  border-radius: 0.3em;\n`\n\nconst JoinCodeInputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const JoinGroupPage = ({...props}) => {\n    const [submitting, setSubmiting] = useState();\n    const {register, handleSubmit, errors} = useForm();\n    const [createGroupError, setCreateGroupError] = useState(null);\n    const [createGroupSuccess, setCreateGroupSuccess] = useState(null);\n    const [allowDerivatives] = useState(true);\n    const urlJoinCode = useParams()['joinCode'];\n    const savedJoinCode = useStoreState(state => state.users.joinCode);\n    const setJoinCode = useStoreActions(actions => actions.users.setJoinCode);\n    const auth = useStoreState(state => state.firebase.auth);\n    const joinCode = urlJoinCode || savedJoinCode || \"\";\n    const firebase = useFirebase();\n\n    useEffect(() =>{\n        if(urlJoinCode){\n            setJoinCode(urlJoinCode);\n        }\n    }, [urlJoinCode])\n\n    const onSubmit = async data => {\n        setSubmiting(true);\n        setCreateGroupError(null);\n        setCreateGroupSuccess(null);\n        try {\n            await firebase.functions().httpsCallable('joinGroup')(\n                {uid: auth.uid, allowDerivatives, ...data}\n            )\n            setCreateGroupSuccess(true);\n        } catch (error) {\n            setCreateGroupError(error.message);\n        }\n        setSubmiting(false);\n    }\n\n    if (isEmpty(auth)) {\n        return <SignUpPage/>\n    } else {\n\n        return (\n            <AppCell>\n                <form onSubmit={handleSubmit(onSubmit)}>\n\n                    <div>\n                        <p>\n                            ledger.bet is invite only. Enter the code for your group to join.\n                        </p>\n                    </div>\n                    <JoinCodeInputContainer>\n                        <JoinCodeInput name=\"joinCode\" defaultValue={joinCode} ref={register({required: true})}/>\n                        <br/>\n                        {(!submitting && !createGroupSuccess) && <SignUpButton type='submit' value='Submit'>Submit</SignUpButton>}\n                        {submitting && <span>submitting</span>}\n                    </JoinCodeInputContainer>\n                    {errors.joinCode &&\n                    <ErrorMessage>You must enter the join code </ErrorMessage>}\n                    <br/>\n                    {createGroupError && <ErrorMessage>{createGroupError}</ErrorMessage>}\n                    {createGroupSuccess &&\n                    <span>You joined the group! <InlineLink to={'/home'}> Go Home </InlineLink></span>}\n                </form>\n            </AppCell>\n        )\n    }\n}\n","/Users/donnie/code/parledger/src/pages/NewWagerPage.js",["156","157","158","159","160"],"import {useStoreActions, useStoreState} from \"easy-peasy\";\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport {SelectOpponent} from \"../components/SelectOpponent\";\nimport {SelectEvent} from \"../components/SelectEvent\";\nimport {ConfirmWagerProposal} from \"../components/ConfirmWagerProposal\";\nimport {useHistory} from 'react-router-dom';\n\nexport const AppCell = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: linear-gradient(to bottom, #FFFFFF04, #FFFFFF09);\n  box-shadow: 3px 3px 25px #0000001C;\n  padding: 1em;\n  border-radius: 0.3em;\n\n  max-width: 800px;\n  margin: auto;\n`\n\nexport const NewWagerPage = () => {\n    const setOpponent = useStoreActions(actions => actions.wagers.new.setOpponent);\n    const history = useHistory();\n    const opponentSelected = (opponent) => {\n        setOpponent(opponent);\n        history.push('/wagers/new/type')\n    }\n\n    return (\n        <SelectOpponent opponentSelected={opponentSelected}/>\n    )\n}","/Users/donnie/code/parledger/src/components/PulseSpinner.js",[],["161","162"],"/Users/donnie/code/parledger/src/stores/store.js",["163"],"import {computed, createStore, reducer} from 'easy-peasy'\nimport firebase from 'firebase/app';\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/functions'\nimport 'firebase/analytics'\nimport 'firebase/storage'\nimport {firebaseReducer, getFirebase} from 'react-redux-firebase'\nimport {createFirestoreInstance, firestoreReducer, getFirestore} from 'redux-firestore'\nimport {wagersModel} from \"./wagers\";\nimport {usersModel} from \"./users\"; // <- needed if using firestore\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASEURL,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n    appId: process.env.REACT_APP_APPID,\n    measurementId: process.env.REACT_APP_MEASUREMENTID,\n};\n\nconsole.log(firebaseConfig);\n\nexport const authProviderIds = process.env.REACT_APP_FIREBASE_PROJECT === 'prod'\n    ? [firebase.auth.GoogleAuthProvider.PROVIDER_ID]\n    : [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n\nconsole.log(`Built with env ${process.env.REACT_APP_FIREBASE_PROJECT}`)\n\nconst rrfConfig = {\n    userProfile: 'users',\n    useFirestoreForProfile: true,\n    profileFactory: (userData) => { // how profiles are stored in database\n        return {\n            uid: userData.uid,\n            email: userData.email,\n            avatarUrl: userData.photoURL || null,\n            displayName: userData.displayName,\n        }\n    }\n}\n\n// Initialize firebase instance\nfirebase.initializeApp(firebaseConfig)\n\n// Initialize other services on firebase instance\nfirebase.firestore() // <- needed if using firestore\nfirebase.functions() // <- needed if using httpsCallable\nfirebase.analytics();\n\nif (window.location.hostname === 'localhost' && process.env.REACT_APP_FIREBASE_PROJECT !== 'prod') {\n    console.log(\"testing locally -- hitting local functions and firestore emulators\");\n    firebase.functions().useEmulator('localhost', 5001);\n    firebase.firestore().settings({\n        host: 'localhost:8080',\n        ssl: false\n    });\n}\n\n\n\nexport const store = createStore({\n    firestore: reducer(firestoreReducer),\n    firebase: reducer(firebaseReducer),\n    wagers: wagersModel,\n    users: usersModel,\n}, {injections: {getFirestore, getFirebase}, disableImmer: true});\n\nexport const reactReduxFirebaseProps = {\n    firebase,\n    config: rrfConfig,\n    dispatch: store.dispatch,\n    createFirestoreInstance // <- needed if using firestore\n}","/Users/donnie/code/parledger/src/stores/wagers.js",[],"/Users/donnie/code/parledger/src/components/SelectOpponent.js",["164","165"],"import {useState} from \"react\";\nimport algoliasearch from 'algoliasearch';\nimport {Hits} from 'react-instantsearch-dom';\nimport styled from 'styled-components';\n\n// Include only the reset\nimport 'instantsearch.css/themes/reset.css';\n// or include the full Algolia theme\nimport 'instantsearch.css/themes/algolia.css';\nimport Avatar from \"react-avatar\";\nimport {useStoreState} from \"easy-peasy\";\nimport {useFirestoreConnect} from \"react-redux-firebase\";\nimport {AppCell} from \"../pages/NewWagerPage\";\n\n\nconst searchClient = algoliasearch(\n    'AT9T4ZSHO4',\n    'e61e275ce3dea2bcb7f1a7249eb3bbcb'\n);\n\nconst HitsContainer = styled.div`\n\n  //background: white;\n  //box-shadow: 3px 3px 25px #0000001C;\n  //margin-top: 0.5em;\n  //border-radius: 0.3em;\n`\n\nconst HitContainer = styled.div`\n  color: #0F2027;\n  text-align: center;\n  padding: 0.3em;\n\n  background: white;\n  box-shadow: 3px 3px 25px #0000001C;\n  margin-top: 0.5em;\n  border-radius: 0.3em;\n\n  display: flex;\n  justify-content: start;\n  align-items: center;\n\n  :hover {\n    background: #f2f2f2;\n    cursor: pointer;\n  }\n`\n\nconst HitContainerSpan = styled.span`\n  padding-left: 1em;\n  font-size: 1.17em;\n`\n\nconst Hit = ({hit, opponentSelected}) => {\n    return (\n        <HitContainer onClick={() => opponentSelected(hit)}>\n            <HitContainerSpan>{hit.avatarUrl\n                ? <Avatar size={40} round={true} src={hit.avatarUrl}/>\n                : <Avatar size={40} round={true} name={hit.displayName}/>\n            }\n            </HitContainerSpan>\n            <HitContainerSpan>\n                {hit.displayName}\n            </HitContainerSpan>\n        </HitContainer>\n    )\n}\n\nconst SearchContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst SearchRow = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledSearchBox = styled.input`\n  font-size: 1.17em;\n  padding: 0.3em;\n  box-shadow: 3px 3px 25px #0000001C;\n  border: 0.3em;\n\n  min-height: 40px;\n  background: white;\n  margin-top: 0.5em;\n  border-radius: 0.3em;\n`\n\nconst doFilter = (query) => (member) => {\n    const name = member.displayName?.toLowerCase() ?? \"\";\n    const email = member.email?.toLowerCase() ?? \"\";\n    const normalizedQuery = query.toLowerCase();\n\n    return name.includes(normalizedQuery) || email.includes(normalizedQuery);\n}\n\nexport const SelectOpponent = ({opponentSelected}) => {\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const profile = useStoreState(state => state.firebase.profile);\n    const auth = useStoreState(state => state.firebase.auth);\n    useFirestoreConnect(profile.groups.map(group => ({collection: `groups/${group}/users`, storeAs: 'groupMembers'})));\n    const members = useStoreState(state => state.firestore.data.groupMembers);\n    const openWagerOptions = {\n        displayName: <span> Allow anyone to accept&nbsp;it </span>,\n        avatarUrl: '/user.png',\n        uid: 'OPEN'\n    }\n    const filteredMembers = [...Object.values(members ?? {}).filter(it => it.uid !== auth.uid).filter(doFilter(searchQuery)), openWagerOptions]\n\n\n    return (\n        <AppCell>\n            <SearchContainer>\n                <SearchRow>\n                    <h2>\n                        Propose a bet to\n                    </h2>\n\n                    <StyledSearchBox\n                        onSubmit={event => {\n                            event.preventDefault();\n                            console.log(event.currentTarget);\n                        }}\n                        placeholder=\"Search for a user\"\n                        onChange={e => setSearchQuery(e.target.value)}\n                    />\n                </SearchRow>\n                <HitsContainer>\n                    {filteredMembers?.map(member => <Hit key={member.uid} hit={member} opponentSelected={opponentSelected}/>)}\n                </HitsContainer>\n            </SearchContainer>\n        </AppCell>\n    )\n}","/Users/donnie/code/parledger/src/components/SelectEvent.js",["166","167","168"],"import {useStoreActions, useStoreState} from \"easy-peasy\";\nimport React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {useHistory} from 'react-router-dom';\nimport {SportSelect} from \"./SportSelect\";\n\nconst OutcomeContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n`\n\nconst OddsContainer = styled.div`\n  font-family: Monaco, SFMono-Regular, monospace;\n`\n\nexport const Outcome = ({outcome}) => {\n    if (outcome) {\n        return (\n            <OutcomeContainer>\n                {outcome.price.handicap && <OddsContainer>\n                    {['O', 'U'].includes(outcome.type) && outcome.type}&nbsp;{outcome.price.handicap + ' '}\n                </OddsContainer>}\n            </OutcomeContainer>\n        )\n    } else {\n        return <span/>\n    }\n}\n\nconst MarketDescription = styled.div`\n  border-bottom: 1px solid white;\n  margin-bottom: 1em;\n`\n\nexport const EventCell = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  background: linear-gradient(to bottom, #FFFFFF04, #FFFFFF09);\n  box-shadow: 3px 3px 25px #0000001C;\n  border-radius: 0.3em;\n  max-width: 800px;\n  margin: 1em auto;\n`\n\nexport const TitleCell = styled(EventCell)`\n  background: transparent;\n  box-shadow: none;\n`\n\nconst TimeAndDateCell = styled.div`\n  grid-column: 1;\n  grid-row: span 2;\n\n  padding: 1em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background: linear-gradient(to bottom, #FFFFFF14, #FFFFFF19);\n`\n\nconst OddsCell = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0.5em;\n`\n\nconst SelectableOddsCellContainer = styled(OddsCell)`\n  color: ${props => {\n    if (props.selected) {\n      return '#00C781';\n    } else if (props.opponent) {\n      return '#FF4040';\n    } else {\n      return 'inherit'\n    }\n  }};\n  display: flex;\n  flex-wrap: wrap-reverse;\n  flex-direction: row-reverse;\n  justify-content: space-between;\n  text-align: end;\n  \n  :hover {\n    cursor: pointer;\n    background: #FFFFFF13;\n  }\n`\n\nconst SelectableOddsCell = ({eventSelected = () => {}, event, market, outcome, selected, opponent}) => {\n\n    return (\n        <SelectableOddsCellContainer selected={selected} opponent={opponent}\n                                     onClick={() => eventSelected({event, market, outcome})}>\n            <Outcome outcome={event?.displayGroups[0]?.markets[market]?.outcomes[outcome]}/>\n        </SelectableOddsCellContainer>\n    )\n}\n\nconst SectionNameCell = styled.div`\n  color: white;\n  grid-column-start: 1;\n  grid-column-end: 5;\n`\n\nexport const TitleRow = ({name}) => {\n    return (\n        <TitleCell>\n            <SectionNameCell>\n                <h2>{name}</h2>\n            </SectionNameCell>\n            <div/>\n            <div/>\n            <OddsCell>\n                Spread\n            </OddsCell>\n            <OddsCell>\n                Total\n            </OddsCell>\n        </TitleCell>\n    )\n}\n\nconst EventHeaderContainer = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 5;\n`\n\nconst NotesRow = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 5;\n\n  border-top: 1px solid white;\n  font-size: smaller;\n  padding: 0.5em;\n`\n\nconst SportSection = ({section, eventSelected}) => {\n    return (\n        <div>\n            <TitleRow name={section.path[0].description}/>\n            {section.events.map(it => <Event eventSelected={eventSelected} event={it}/>)}\n        </div>\n    )\n}\n\nconst OutcomesRow = ({event, wagerMembers, selectedOutcome, selectedMarket, eventSelected, rowNum}) => {\n    const auth = useStoreState(state => state.firebase.auth);\n    if (!!wagerMembers) {\n        const selected = wagerMembers[rowNum]?.uid === auth.uid;\n        const opponent = wagerMembers[(rowNum + 1) % 2]?.uid === auth.uid;\n        return (\n            <React.Fragment>\n                <SelectableOddsCellContainer selected={selected} opponent={opponent}>\n                    {wagerMembers[rowNum]?.displayName ?? 'Anyone'}\n                </SelectableOddsCellContainer>\n                <SelectableOddsCell selected={selected} opponent={opponent} event={event} market={selectedMarket}\n                                    outcome={rowNum}/>\n            </React.Fragment>\n        )\n    } else {\n        return (\n            <React.Fragment>\n                <SelectableOddsCell\n                    eventSelected={eventSelected}\n                    event={event} market={0} outcome={rowNum}/>\n                <SelectableOddsCell\n                    eventSelected={eventSelected}\n                    event={event} market={2} outcome={rowNum}/>\n            </React.Fragment>\n        )\n    }\n}\n\nexport const Event = (props) => {\n    const {headerComponent, footerComponent, event} = props;\n    const eventTime = new Date(event.startTime);\n    return (\n        <EventCell key={event.id}>\n            {headerComponent && <EventHeaderContainer>{headerComponent}</EventHeaderContainer>}\n            <TimeAndDateCell>\n                <div>{eventTime.toLocaleDateString()}</div>\n                <div>{eventTime.toLocaleTimeString()}</div>\n            </TimeAndDateCell>\n            <OddsCell>\n                {event.competitors[1]?.name}\n            </OddsCell>\n            <OutcomesRow {...props} rowNum={0}/>\n            <OddsCell>\n                {event.competitors[0]?.name}\n            </OddsCell>\n            <OutcomesRow {...props} rowNum={1}/>\n            {event.notes && <NotesRow>\n                {event.notes}\n            </NotesRow>}\n            {footerComponent && <EventHeaderContainer> {footerComponent} </EventHeaderContainer>}\n        </EventCell>\n    )\n};\n\n\nexport const SelectEvent = ({}) => {\n    const events = useStoreState(state => state.wagers.filteredEvents);\n    const [numSections, setNumSections] = useState(2);\n    const renderedEvents = events?.slice(0, numSections) || [];\n    const fetchMoreData = () => setNumSections(numSections + 1)\n    const setEvent = useStoreActions(actions => actions.wagers.new.setDetails);\n    const history = useHistory();\n\n    const updateEvents = useStoreActions(actions => actions.wagers.loadEvents);\n    useEffect(() => {\n        updateEvents().catch(console.error);\n    }, [events]);\n\n\n    const eventSelected = (event) => {\n        setEvent(event);\n        history.push('/wagers/new/confirm')\n    }\n\n    return (\n        <React.Fragment>\n            <SportSelect/>\n            <InfiniteScroll\n                dataLength={renderedEvents.length}\n                next={fetchMoreData}\n                hasMore={renderedEvents?.length !== events?.length}\n                loader={<h4>Loading...</h4>}\n                endMessage={\n                    <p style={{textAlign: \"center\"}}>\n                        <b>Huh, that's it.</b>\n                    </p>\n                }\n            >\n                {renderedEvents.map(section => <SportSection key={section.id} eventSelected={eventSelected}\n                                                             section={section}/>)}\n            </InfiniteScroll>\n        </React.Fragment>\n    )\n}","/Users/donnie/code/parledger/src/components/SportSelect.js",["169"],"/Users/donnie/code/parledger/src/components/SplashScreen.js",[],"/Users/donnie/code/parledger/src/components/PersonalWagers.js",["170","171","172","173","174","175"],"import {useStoreActions, useStoreState} from \"easy-peasy\";\nimport {Event, EventCell} from \"./SelectEvent\";\nimport styled from 'styled-components';\nimport {buttonCss, ButtonLink, InlineLink} from \"../styles\";\nimport {useState, useEffect} from \"react\";\nimport {useFirestoreConnect} from \"react-redux-firebase\";\nimport {Link} from \"react-router-dom\";\n\nconst WagerDescriptionRowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0.5em;\n\n  font-size: 1em;\n  border-radius: 0.3em 0.3em 0 0;\n  background: white;\n  color: #0F2027;\n\n  @media (max-width: 600px) {\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n  }\n`\n\nconst WagerDescriptionText = styled.div`\n\n`\n\nconst WagerAmountContainer = styled.div`\n`\n\nconst WagerAmount = ({risk, toWin}) => {\n    return (\n        <WagerAmountContainer>\n            ${risk}\n        </WagerAmountContainer>\n    );\n}\n\nconst WagerDescriptionIcon = styled.i`\n  padding-right: 0.5em;\n`\n\nconst MemberAndAmountContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst MemberAndAmount = ({wager, risk, toWin}) => {\n    const auth = useStoreState(state => state.firebase.auth);\n    const proposedBy = wager.proposedBy.uid === auth.uid ? \"You\" : wager.proposedBy.displayName;\n    const proposedTo = wager.proposedTo?.uid === auth.uid ? \"You\" : wager.proposedTo?.displayName;\n\n    if (wager.status === 'open') {\n        return <WagerMembersContainer>\n            {proposedBy} risked ${risk} to win ${toWin || risk} from anyone who would accept the bet\n        </WagerMembersContainer>\n    }\n    if (risk === toWin) {\n        return <MemberAndAmountContainer>\n            <WagerMembers wager={wager}/>\n            <WagerAmount risk={risk} toWin={toWin}/>\n        </MemberAndAmountContainer>\n    } else {\n        return (\n            <WagerMembersContainer>\n                {proposedBy} risked ${risk} to win ${toWin} from {proposedTo}\n            </WagerMembersContainer>\n        )\n    }\n}\n\nexport const WagerDescriptionRow = ({eventDescription, pending, risk, toWin, wager}) => {\n    return (<WagerDescriptionRowContainer>\n            <WagerDescriptionText>\n                {pending\n                    ? <span>\n                    <WagerDescriptionIcon title=\"This wager is pending\" className=\"fas fa-user-clock\"/>\n                        {'  '}\n                </span>\n                    : <span>\n                        <WagerDescriptionIcon title=\"This wager was confirmed\" className=\"fas fa-check-circle\"/>\n                        {'  '}\n                    </span>}\n\n                {eventDescription}\n            </WagerDescriptionText>\n            <MemberAndAmount {...{toWin, risk, wager}}/>\n        </WagerDescriptionRowContainer>\n    );\n}\n\n\nconst ConfirmButton = styled.button`\n  ${buttonCss};\n  background: #3cc921;\n\n  :hover {\n    background: #3cc921cF;\n  }\n`\n\nconst RejectButton = styled.button`\n  ${buttonCss};\n  background: #FF4040;\n\n  :hover {\n    background: #FF4040cF;\n    cursor: pointer;\n  }\n`\n\nconst WagerActionsGroup = styled.div`\n  text-align: end;\n`\n\nconst ConfirmWagerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n\n  border-radius: 0 0 0.3em 0.3em;\n  background: white;\n  color: #0F2027;\n`\n\nconst ConfirmWagerText = styled.span`\n  margin: 1em;\n`\n\nconst WagerMembersContainer = styled.span`\n  display: flex;\n  padding-right: 0.5em;\n  justify-content: center;\n  align-items: center;\n`\n\nconst WagerMembers = ({wager}) => {\n    const auth = useStoreState(state => state.firebase.auth);\n    const proposedBy = wager.proposedBy.uid === auth.uid ? \"You\" : wager.proposedBy.displayName;\n    const proposedTo = wager.proposedTo?.uid === auth.uid ? \"You\" : wager.proposedTo?.displayName || 'Anyone';\n\n    return (\n        <WagerMembersContainer>\n            {proposedBy} vs. {proposedTo}\n        </WagerMembersContainer>\n    )\n}\n\nconst ConfirmWagerRow = ({onConfirm, wager}) => {\n    const auth = useStoreState(state => state.firebase.auth);\n    const [loading, setLoading] = useState(false);\n\n    const confirm = (accept) => async () => {\n        setLoading(true);\n        try {\n            await onConfirm(wager.id, wager.groupId, accept);\n        } catch (e) {\n            console.error(e);\n        }\n        setLoading(false);\n    }\n\n    if (loading) {\n        return (\n            <ConfirmWagerContainer>\n                Loading ...\n            </ConfirmWagerContainer>\n        )\n    } else if (wager.status === 'pending' && wager.proposedTo?.uid === auth.uid) {\n        return (\n            <ConfirmWagerContainer>\n                <ConfirmWagerText>\n                    <i className=\"fas fa-exclamation-circle\"/> {wager.proposedBy.displayName} proposed this bet to you.\n                </ConfirmWagerText>\n                <WagerActionsGroup>\n                    <ConfirmButton onClick={confirm(true)}>\n                        Confirm it\n                    </ConfirmButton>\n                    <RejectButton onClick={confirm(false)}>\n                        Reject it\n                    </RejectButton>\n                </WagerActionsGroup>\n            </ConfirmWagerContainer>\n        )\n    } else if (wager.status === 'open' && wager.proposedBy.uid !== auth.uid) {\n        return (\n            <ConfirmWagerContainer>\n                <ConfirmWagerText>\n                    <i className=\"fas fa-exclamation-circle\"/> {wager.proposedBy.displayName} offered this bet to anyone.\n                </ConfirmWagerText>\n                <WagerActionsGroup>\n                    <ConfirmButton onClick={confirm(true)}>\n                        Accept it\n                    </ConfirmButton>\n                </WagerActionsGroup>\n            </ConfirmWagerContainer>\n        )\n    } else if (wager.proposedBy.uid === auth.uid && (wager.status === 'pending' || wager.status === 'open')) {\n        return (\n            <ConfirmWagerContainer>\n                <ConfirmWagerText> <i className=\"fas fa-exclamation-circle\"/> You proposed this bet\n                    to {wager.proposedTo?.displayName} </ConfirmWagerText>\n                <WagerActionsGroup>\n                    <RejectButton onClick={confirm(false)}>\n                        Rescind it\n                    </RejectButton>\n                </WagerActionsGroup>\n            </ConfirmWagerContainer>\n        )\n    } else if (wager.proposedBy.uid === auth.uid || wager.proposedTo?.uid === auth.uid) {\n        const linkOptions = {\n            pathname: '/wagers/manage',\n            state: wager\n        };\n\n        // return (\n        //     <ButtonLink\n        //         to={linkOptions}>\n        //         Manage this wager\n        //     </ButtonLink>\n        // )\n\n        return null;\n    } else {\n        return null;\n    }\n}\n\nconst membersFromWager = (wager) => {\n    return {\n        [wager.details.outcome]: wager.proposedBy,\n        [(wager.details.outcome + 1) % 2]: wager.proposedTo\n    }\n}\n\nconst CustomWagerContainer = styled.div`\n  background: linear-gradient(to bottom, #FFFFFF04, #FFFFFF09);\n  box-shadow: 3px 3px 25px #0000001C;\n  border-radius: 0.3em;\n  max-width: 800px;\n  margin: 1em auto;\n`\n\nconst CustomWagerDetails = styled.div`\n  padding: 1em;\n`\n\nconst Wager = (props) => {\n    const {wager} = props;\n    if (wager.type === 'BOVADA') {\n        const selection = wager.details.selection || wager.details;\n        return <Event\n            wagerMembers={membersFromWager(wager)}\n            eventSelected={() => {\n            }}\n            headerComponent={\n                <WagerDescriptionRow\n                    wager={wager}\n                    pending={wager.status === 'pending'}\n                    eventDescription={selection.event.description}\n                    risk={wager.details.risk}/>\n            }\n            footerComponent={<ConfirmWagerRow {...props} />}\n            event={selection.event}\n            selectedMarket={selection.market}\n            selectedOutcome={selection.outcome}\n        />\n    } else if (wager.type === 'CUSTOM') {\n        return (\n            <CustomWagerContainer>\n                <WagerDescriptionRow\n                    wager={wager}\n                    pending={wager.status === 'pending'}\n                    eventDescription={\"Custom Wager\"}\n                    risk={wager.details.risk}\n                    toWin={wager.details.toWin}\n                />\n                <CustomWagerDetails>\n                    {wager.details.description}\n                </CustomWagerDetails>\n                <ConfirmWagerRow {...props}/>\n            </CustomWagerContainer>\n        )\n    }\n\n    return null;\n}\n\nconst PersonalWagersTitle = styled.div`\n  max-width: 800px;\n  margin: 1em auto;\n`\n\nexport const PersonalWagers = ({}) => {\n    const profile = useStoreState(state => state.firebase.profile);\n    const confirmWagerAction = useStoreActions(actions => actions.wagers.respondToWager);\n    const wagers = Object.values(profile?.wagers ?? {}).filter(wager => wager.status !== 'rejected');\n    const confirmWager = async (wagerId, groupId, acceptWager) => {\n        await confirmWagerAction({wagerId, groupId, accept: acceptWager})\n    };\n\n    return (\n        <div>\n            <PersonalWagersTitle>\n                <h3>\n                    Your Wagers\n                </h3>\n            </PersonalWagersTitle>\n            {wagers.length > 0\n                ? wagers.map(wager => <Wager key={wager.id} onConfirm={confirmWager} wager={wager}/>)\n                : <PersonalWagersTitle>\n                    You haven't made any wagers yet, maybe you should <InlineLink to={'/wagers/new'}>propose\n                    one </InlineLink>\n                </PersonalWagersTitle>\n            }\n        </div>\n    )\n}\n\nexport const useGroupWagers = () => {\n    const profile = useStoreState(state => state.firebase.profile);\n    useFirestoreConnect(profile?.groups?.map(g => ({collection: `groups/${g}/wagers`, storeAs: 'wagers'})));\n    const loadGroupWagers = useStoreActions(actions => actions.wagers.loadGroupWagers);\n    useEffect(() => {\n        loadGroupWagers()?.catch(console.error);\n    }, [loadGroupWagers])\n    return useStoreState(state => state.wagers.groupWagers);\n}\n\nexport const GroupWagers = ({}) => {\n    const profile = useStoreState(state => state.firebase.profile)\n    useFirestoreConnect([{collection: `groups/${profile.groups[0]}/wagers`, storeAs: 'wagers'}]);\n    const auth = useStoreState(state => state.firebase.auth)\n    const rawWagers = useStoreState(state => state.firestore.data.wagers)\n    const confirmWagerAction = useStoreActions(actions => actions.wagers.respondToWager);\n    const wagers = Object.values(rawWagers ?? {})\n        .filter(wager => wager.status !== 'rejected')\n        .filter(wager => wager.proposedTo?.uid !== auth.uid && wager.proposedBy?.uid !== auth.uid)\n\n    const confirmWager = async (wagerId, groupId, acceptWager) => {\n        await confirmWagerAction({wagerId, groupId, accept: acceptWager})\n    };\n\n    if (wagers.length > 0) {\n        return (\n            <div>\n                <PersonalWagersTitle>\n                    <h3>\n                        Group Wagers\n                    </h3>\n                </PersonalWagersTitle>\n                {wagers.map(wager => <Wager key={wager.id} onConfirm={confirmWager} wager={wager}/>)}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}","/Users/donnie/code/parledger/src/styles.js",[],"/Users/donnie/code/parledger/src/stores/users.js",[],"/Users/donnie/code/parledger/src/components/ProposeCustomWager.js",["176","177","178","179","180"],"import styled, {css} from \"styled-components\";\nimport {useForm} from \"react-hook-form\";\nimport React, {useState} from 'react';\nimport {useStoreActions, useStoreState} from \"easy-peasy\";\nimport {AppCell} from \"../pages/NewWagerPage\";\nimport {useSaveWager} from \"../stores/wagers\";\nimport {Redirect} from \"react-router-dom\";\nimport {InlineLink} from \"../styles\";\nimport {LoadingImage} from \"./SplashScreen\";\nimport signUpImage from \"../resources/undraw_Savings_re_eq4w.svg\";\nimport {SubmittingImageContainer} from \"./ConfirmWagerProposal\";\n\nconst customAmountInputCss = css`\n  color: white;\n  font-size: 1.2em;\n  background: none;\n  padding: 0.3em;\n  height: 100%;\n  box-sizing: border-box;\n`\n\nconst CustomAmountInputField = styled.input`\n  ${customAmountInputCss};\n  border-top: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-left: none;\n  border-right: 1px solid var(--border-color);\n\n  border-radius: 0 0.3em 0.3em 0;\n  width: 100%;\n  flex-grow: 1;\n\n  :focus {\n    outline: none;\n    border-top: 1px solid var(--border-color);\n    border-bottom: 1px solid var(--border-color);\n    border-left: none;\n    border-right: 1px solid var(--border-color);\n  }\n`\n\nconst CustomAmountInputCurrency = styled.div`\n  ${customAmountInputCss};\n  border-top: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-left: 1px solid var(--border-color);\n  border-right: none;\n\n  border-radius: 0.3em 0 0 0.3em;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\nconst WagerAmount = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 1em 0;\n`\n\nconst WagerDescription = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 3;\n  \n  display: flex;\n  flex-direction: column;\n`\n\nconst WagerDescriptionTextArea = styled.textarea`\n  font-family: Avenir, sans-serif;\n  color: white;\n  font-size: 1.2em;\n  background: none;\n  padding: 0.3em;\n  border: 1px solid white;\n  height: 30vh;\n`\n\nconst CustomWagerContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1em;\n`\n\nconst SubmitRow = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 3;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-top: 1em;\n`\n\nconst SubmitBetButton = styled.button`\n  border-radius: 0.3em;\n  color: white;\n  font-size: 1.2em;\n  padding: 0.3em;\n  width: 50%;\n  border: 1px solid white;\n  background: none;\n\n  :hover {\n    cursor: pointer;\n    background: #FFFFFF13;\n  }\n`\n\nconst CustomAmountWrapper = styled.div`\n  --border-color: white;\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n\n  :focus-within {\n    --border-color: #afafaf;\n  }\n`\n\nconst ErrorMessage = styled.div`\n  color: #FF4040;\n`\n\nconst SuccessMessage = styled.div`\n  color: #00C781;\n`\n\nconst CustomAmountInput = (props) => {\n    const {register} = props;\n    return (\n        <CustomAmountWrapper>\n            <CustomAmountInputCurrency> $ </CustomAmountInputCurrency>\n            <CustomAmountInputField ref={register} {...props}/>\n        </CustomAmountWrapper>\n    )\n}\n\nexport const ProposeCustomWager = ({}) => {\n    const opponent = useStoreState(state => state.wagers.new.opponent);\n    const {handleSubmit, setValue, control, errors, register, watch, formState} = useForm();\n\n    const watchRisk = watch('risk');\n\n    // if (!formState.dirtyFields.toWin) {\n    //     setValue('toWin', watchRisk);\n    // }\n\n    const {submitting, apiError, apiSuccess, save} = useSaveWager()\n\n    if (opponent === null) {\n        return <Redirect to={'/wagers/new'}/>\n    }\n\n    const onSubmit = async (data) => {\n        console.log(data);\n        await save({\n            risk: data.risk,\n            toWin: data.toWin,\n            details: {description: data.wagerDescription},\n            opponent: opponent,\n            type: 'CUSTOM'\n        });\n    }\n\n\n    const getFormErrorMessage = (errors) => {\n        const messages = {\n            wagerDescription: \"Must provide a wager description or yours is too long\",\n            risk: \"Must enter an amount to risk\",\n            toWin: \"Must enter an amount to win\",\n        }\n\n        return messages[Object.keys(errors)[0]]\n    }\n\n    return (\n        <AppCell>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <CustomWagerContainer>\n                    <WagerAmount>\n                        Risk\n                        <CustomAmountInput\n                            register={register({required: true})}\n                            name='risk'\n                        />\n                        {errors.risk && <ErrorMessage>\n                            {getFormErrorMessage(errors)}\n                        </ErrorMessage>}\n                    </WagerAmount>\n\n                    <WagerAmount>\n                        To Win\n                        <CustomAmountInput\n                            register={register({required: true, defaultValue: watchRisk})}\n                            name='toWin'\n                        />\n                        {(errors.toWin && !errors.risk) && <ErrorMessage>\n                            {getFormErrorMessage(errors)}\n                        </ErrorMessage>}\n                    </WagerAmount>\n\n                    <WagerDescription>\n                        Description\n                        {errors.wagerDescription && <ErrorMessage>\n                            {getFormErrorMessage(errors)}\n                        </ErrorMessage>}\n                        <WagerDescriptionTextArea\n                            ref={register({required: true, maxLength: 1000})}\n                            name='wagerDescription'/>\n\n                    </WagerDescription>\n                    {submitting\n                        ? <SubmittingImageContainer>\n                            <LoadingImage src={signUpImage}/>\n                        </SubmittingImageContainer>\n                        : apiSuccess\n                            ? <SubmitRow>\n                                <SuccessMessage>\n                                    {apiSuccess}\n                                </SuccessMessage>\n                                <InlineLink to={'/home'}>Go Home</InlineLink>\n                            </SubmitRow>\n                            : (apiError && !formState.isDirty)\n                                ? <SubmitRow>\n                                    <ErrorMessage>\n                                        {apiError}\n                                    </ErrorMessage>\n                                </SubmitRow>\n\n                                : <SubmitRow>\n                                    <SubmitBetButton type=\"submit\">\n                                        Submit\n                                    </SubmitBetButton>\n                                </SubmitRow>\n                    }\n                </CustomWagerContainer>\n            </form>\n        </AppCell>\n    )\n}","/Users/donnie/code/parledger/src/components/ManageWager.js",["181","182","183","184"],"import {useStoreActions, useStoreState} from \"easy-peasy\";\nimport {Event, TitleRow} from \"./SelectEvent\";\nimport React, {useEffect} from \"react\";\nimport {AppCell} from \"../pages/NewWagerPage\";\nimport {useLocation} from 'react-router-dom';\nimport {WagerDescriptionRow} from \"./PersonalWagers\";\n\nexport const ManageWager = ({}) => {\n    const profile = useStoreState(state => state.firebase.profile);\n    const savedWager = useStoreState(state => state.wagers.activeWager);\n    const setActiveWager = useStoreActions(actions => actions.wagers.setActiveWager);\n    let location = useLocation();\n    const activeWager = location.state || savedWager;\n\n    console.log(activeWager);\n\n    useEffect(() => {\n        setActiveWager(activeWager);\n    }, [activeWager])\n\n    if (activeWager?.type === 'BOVADA') {\n        const event = activeWager.details.selection.event;\n        return (\n            <AppCell>\n                <Event\n                    headerComponent={\n                        <WagerDescriptionRow\n                            wager={activeWager}\n                            pending={activeWager.status === 'pending'}\n                            eventDescription={activeWager.details.selection.event.description}\n                            risk={activeWager.details.risk}/>\n                    }\n                    wagerMembers={{1: activeWager.proposedTo, 0: activeWager.proposedBy}}\n                    selectedMarket={activeWager.details.selection.market}\n                    selectedOutcome={activeWager.details.selection.outcome}\n                    event={event}/>\n            </AppCell>\n        )\n    }\n\n\n    return null;\n}","/Users/donnie/code/parledger/src/components/ConfirmWagerProposal.js",["185","186","187","188","189","190","191"],"import {Event, Outcome, TitleRow} from \"./SelectEvent\";\nimport React, {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport styled, {css} from \"styled-components\";\nimport {useStoreActions, useStoreState} from \"easy-peasy\";\nimport {InlineLink, shadow} from \"../styles\";\nimport {LoadingImage, SplashScreen} from \"./SplashScreen\";\nimport signUpImage from \"../resources/undraw_Savings_re_eq4w.svg\";\nimport {useSaveWager} from \"../stores/wagers\";\nimport {Redirect} from 'react-router-dom';\n\n\nconst OutcomeDescription = ({outcome}) => {\n    console.log(outcome);\n    if (outcome) {\n        return (\n            <span>\n                {outcome.description}\n                {outcome.price.handicap && <span>\n                    {' ' + outcome.price.handicap + ' '}\n                </span>}\n                {!outcome.price.handicap && <span>\n                    {' ' + outcome.price.american + ' '}\n                </span>}\n            </span>\n        )\n    } else {\n        return <span/>\n    }\n}\n\nconst EventDescription = ({event, market, outcome}) => {\n    const selectedMarket = event.displayGroups[0].markets[market];\n    const selectedOutcome = selectedMarket.outcomes[outcome];\n    const eventTime = new Date(event.startTime)\n    return (\n        <div>\n            <div> For {event.description} on {eventTime.toLocaleDateString()} at {eventTime.toLocaleTimeString()}</div>\n            <div>you picked <OutcomeDescription outcome={selectedOutcome}/> in a {selectedMarket.description} bet.</div>\n        </div>\n    )\n};\n\nconst BetAmountButton = styled.button`\n  border-radius: 0.3em;\n  color: white;\n  font-size: 1.2em;\n  padding: 0.3em;\n  border: 1px solid white;\n  background: none;\n\n  width: 100px;\n  margin: 1em;\n\n  :hover {\n    cursor: pointer;\n    background: #FFFFFF13;\n  }\n`\n\nconst BetAmountRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst ErrorMessage = styled.div`\n  color: #FF4040;\n`\n\nconst SuccessMessage = styled.div`\n  color: #00C781;\n`\n\nexport const membersFromWager = (selection, profile, opponent) => {\n    return {\n        [selection.outcome]: profile,\n        [(selection.outcome + 1) % 2]: opponent\n    }\n}\n\nconst CustomAmountButtonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst CustomAmountForm = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 2.5rem;\n  --border-color: white;\n\n  :focus-within {\n    --border-color: #afafaf;\n  }\n`\n\nconst customAmountInputCss = css`\n  color: white;\n  font-size: 1.2em;\n  background: none;\n  height: 100%;\n  padding: 0.3em;\n  box-sizing: border-box;\n`\n\nconst CustomAmountInput = styled.input`\n  ${customAmountInputCss};\n  border-top: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-left: none;\n  border-right: none;\n\n  border-radius: 0;\n\n  :focus {\n    outline: none;\n    border-top: 1px solid var(--border-color);\n    border-bottom: 1px solid var(--border-color);\n    border-left: none;\n    border-right: none;\n  }\n`\n\nconst CustomAmountInputCurrency = styled.div`\n  ${customAmountInputCss};\n  border-top: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-left: 1px solid var(--border-color);\n  border-right: none;\n\n  border-radius: 0.3em 0 0 0.3em;\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`\n\nconst CustomAmountInputButton = styled.button`\n  ${customAmountInputCss};\n  border-top: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-right: 1px solid var(--border-color);\n  border-left: none;\n  padding: 0.3em;\n  border-radius: 0 0.3em 0.3em 0;\n\n  :hover {\n    cursor: pointer;\n    color: #FFFFFFaF;\n  }\n`\n\nconst CustomAmountButton = ({saveWager}) => {\n    const [selected, setSelected] = useState(false);\n    const {register, handleSubmit, watch, errors} = useForm();\n    const onSubmit = (data) => {\n        saveWager(data.betAmount);\n    }\n    return (\n        <CustomAmountButtonContainer>\n            {!selected\n                ? <BetAmountButton\n                    onClick={() => setSelected(true)}>\n                    Custom\n                </BetAmountButton>\n                : <React.Fragment>\n                    <CustomAmountForm onSubmit={handleSubmit(onSubmit)}>\n                        <CustomAmountInputCurrency>$</CustomAmountInputCurrency>\n                        <CustomAmountInput\n                            ref={register()}\n                            placeholder={0}\n                            name='betAmount'\n                            type='number'/>\n\n                        <CustomAmountInputButton\n                            onClick={() => setSelected(true)}>\n                            Submit\n                        </CustomAmountInputButton>\n                    </CustomAmountForm>\n                </React.Fragment>}\n        </CustomAmountButtonContainer>\n    )\n}\n\nexport const SubmittingImageContainer = styled.div`\n  width: 30%;\n  margin: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ConfirmWagerProposal = () => {\n    const selection = useStoreState(state => state.wagers.new.details);\n    const opponent = useStoreState(state => state.wagers.new.opponent);\n    const profile = useStoreState(state => state.firebase.profile);\n\n\n    const {submitting, apiError, apiSuccess, save} = useSaveWager()\n    const saveWager = async (betAmount) => save({\n        risk: betAmount,\n        toWin: betAmount,\n        details: selection,\n        opponent: opponent,\n        type: 'BOVADA'\n    });\n\n    if (opponent === null) {\n        return <Redirect to={'/wagers/new'}/>\n    }\n\n    return (\n        <div>\n            <div>\n                Confirm your proposed bet with {opponent.displayName}\n            </div>\n            <TitleRow name={selection.event.description}/>\n            <Event\n                wagerMembers={membersFromWager(selection, profile, opponent)}\n                eventSelected={() => {\n                }}\n                event={selection.event}\n                selectedMarket={selection.market}\n                selectedOutcome={selection.outcome}\n            />\n            {submitting\n                ? <SubmittingImageContainer>\n                    <LoadingImage src={signUpImage}/>\n                </SubmittingImageContainer>\n                : apiSuccess\n                    ? <div>\n                        <SuccessMessage>{apiSuccess}</SuccessMessage>\n                        <InlineLink to={'/home'}>Go Home</InlineLink>\n                    </div>\n                    : <div>\n                        How much to bet?\n                        <BetAmountRow>\n                            {[10, 20, 50, 100].map(it => <BetAmountButton\n                                onClick={() => saveWager(it)}>${it}</BetAmountButton>)}\n                            <CustomAmountButton\n                                saveWager={saveWager}\n                            />\n                        </BetAmountRow>\n                    </div>}\n            {apiError && <ErrorMessage>\n                {apiError}\n            </ErrorMessage>}\n        </div>\n    )\n}","/Users/donnie/code/parledger/src/components/SelectWagerType.js",["192"],"import styled from 'styled-components'\nimport {AppCell} from \"../pages/NewWagerPage\";\nimport {useStoreActions} from \"easy-peasy\";\nimport {SignUpButton} from \"../pages/SignUpPage\";\nimport {useHistory} from 'react-router-dom';\n\n\nconst wagerTypeToDetailsRoute = {\n    'BOVADA': '/wagers/new/sports',\n    'CUSTOM': '/wagers/new/custom'\n}\n\nconst WagerOptionsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n`\n\nconst WagerTypeOption = styled(SignUpButton)`\n  margin: 1em;\n  width: 35vw;\n  min-width: 150px;\n`\n\nconst SelectWagerTypeContainer = styled(AppCell)`\n    align-items: center;\n`\n\nexport const SelectWagerType = ({}) => {\n    const setType = useStoreActions(actions => actions.wagers.new.setType);\n    const history = useHistory();\n\n    const onTypeSelected = (type) => {\n        setType(type);\n        const route = wagerTypeToDetailsRoute[type];\n        history.push(route);\n    }\n\n    return (\n        <SelectWagerTypeContainer>\n            <h2>\n                What kind of wager?\n            </h2>\n            <WagerOptionsContainer>\n                <WagerTypeOption onClick={() => onTypeSelected('BOVADA')}>\n                    Sports\n                </WagerTypeOption>\n                <WagerTypeOption onClick={() => onTypeSelected('CUSTOM')}>\n                    Custom\n                </WagerTypeOption>\n            </WagerOptionsContainer>\n        </SelectWagerTypeContainer>\n    )\n}","/Users/donnie/code/parledger/src/hooks.js",["193"],"import {useState, useEffect} from 'react';\nimport {throttle} from 'lodash';\n\nconst getDeviceConfig = (width) => {\n    if(width < 320) {\n        return 'xs';\n    } else if(width >= 320 && width < 720 ) {\n        return 'sm';\n    } else if(width >= 720 && width < 1024) {\n        return 'md';\n    } else if(width >= 1024) {\n        return 'lg';\n    }\n};\n\nexport const useBreakpoint = () => {\n    const [brkPnt, setBrkPnt] = useState(() => window.innerWidth);\n\n    useEffect(() => {\n        const calcInnerWidth = throttle(function() {\n            setBrkPnt(window.innerWidth)\n        }, 200);\n        window.addEventListener('resize', calcInnerWidth);\n        return () => window.removeEventListener('resize', calcInnerWidth);\n    }, []);\n\n    return brkPnt;\n}",{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":1,"column":9,"nodeType":"200","messageId":"201","endLine":1,"endColumn":24},{"ruleId":"198","severity":1,"message":"202","line":3,"column":9,"nodeType":"200","messageId":"201","endLine":3,"endColumn":20},{"ruleId":"198","severity":1,"message":"203","line":16,"column":12,"nodeType":"200","messageId":"201","endLine":16,"endColumn":22},{"ruleId":"198","severity":1,"message":"204","line":17,"column":11,"nodeType":"200","messageId":"201","endLine":17,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":49,"column":11,"nodeType":"200","messageId":"201","endLine":49,"endColumn":18},{"ruleId":"198","severity":1,"message":"205","line":6,"column":11,"nodeType":"200","messageId":"201","endLine":6,"endColumn":18},{"ruleId":"194","replacedBy":"206"},{"ruleId":"196","replacedBy":"207"},{"ruleId":"198","severity":1,"message":"208","line":1,"column":9,"nodeType":"200","messageId":"201","endLine":1,"endColumn":28},{"ruleId":"198","severity":1,"message":"209","line":2,"column":9,"nodeType":"200","messageId":"201","endLine":2,"endColumn":22},{"ruleId":"198","severity":1,"message":"210","line":3,"column":38,"nodeType":"200","messageId":"201","endLine":3,"endColumn":52},{"ruleId":"198","severity":1,"message":"211","line":6,"column":9,"nodeType":"200","messageId":"201","endLine":6,"endColumn":13},{"ruleId":"198","severity":1,"message":"212","line":10,"column":9,"nodeType":"200","messageId":"201","endLine":10,"endColumn":18},{"ruleId":"213","severity":1,"message":"214","line":55,"column":8,"nodeType":"215","endLine":55,"endColumn":21,"suggestions":"216"},{"ruleId":"198","severity":1,"message":"209","line":1,"column":26,"nodeType":"200","messageId":"201","endLine":1,"endColumn":39},{"ruleId":"198","severity":1,"message":"217","line":2,"column":16,"nodeType":"200","messageId":"201","endLine":2,"endColumn":25},{"ruleId":"198","severity":1,"message":"218","line":2,"column":27,"nodeType":"200","messageId":"201","endLine":2,"endColumn":35},{"ruleId":"198","severity":1,"message":"219","line":5,"column":9,"nodeType":"200","messageId":"201","endLine":5,"endColumn":20},{"ruleId":"198","severity":1,"message":"220","line":6,"column":9,"nodeType":"200","messageId":"201","endLine":6,"endColumn":29},{"ruleId":"194","replacedBy":"221"},{"ruleId":"196","replacedBy":"222"},{"ruleId":"198","severity":1,"message":"223","line":1,"column":9,"nodeType":"200","messageId":"201","endLine":1,"endColumn":17},{"ruleId":"198","severity":1,"message":"224","line":3,"column":9,"nodeType":"200","messageId":"201","endLine":3,"endColumn":13},{"ruleId":"198","severity":1,"message":"225","line":16,"column":7,"nodeType":"200","messageId":"201","endLine":16,"endColumn":19},{"ruleId":"198","severity":1,"message":"226","line":32,"column":7,"nodeType":"200","messageId":"201","endLine":32,"endColumn":24},{"ruleId":"227","severity":1,"message":"228","line":207,"column":29,"nodeType":"229","messageId":"230","endLine":207,"endColumn":31},{"ruleId":"213","severity":1,"message":"231","line":218,"column":8,"nodeType":"215","endLine":218,"endColumn":16,"suggestions":"232"},{"ruleId":"227","severity":1,"message":"228","line":82,"column":29,"nodeType":"229","messageId":"230","endLine":82,"endColumn":31},{"ruleId":"198","severity":1,"message":"212","line":2,"column":16,"nodeType":"200","messageId":"201","endLine":2,"endColumn":25},{"ruleId":"198","severity":1,"message":"233","line":4,"column":20,"nodeType":"200","messageId":"201","endLine":4,"endColumn":30},{"ruleId":"198","severity":1,"message":"211","line":7,"column":9,"nodeType":"200","messageId":"201","endLine":7,"endColumn":13},{"ruleId":"198","severity":1,"message":"234","line":216,"column":15,"nodeType":"200","messageId":"201","endLine":216,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":299,"column":32,"nodeType":"229","messageId":"230","endLine":299,"endColumn":34},{"ruleId":"227","severity":1,"message":"228","line":335,"column":29,"nodeType":"229","messageId":"230","endLine":335,"endColumn":31},{"ruleId":"198","severity":1,"message":"218","line":3,"column":16,"nodeType":"200","messageId":"201","endLine":3,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":4,"column":9,"nodeType":"200","messageId":"201","endLine":4,"endColumn":24},{"ruleId":"227","severity":1,"message":"228","line":142,"column":36,"nodeType":"229","messageId":"230","endLine":142,"endColumn":38},{"ruleId":"198","severity":1,"message":"235","line":144,"column":26,"nodeType":"200","messageId":"201","endLine":144,"endColumn":34},{"ruleId":"198","severity":1,"message":"236","line":144,"column":36,"nodeType":"200","messageId":"201","endLine":144,"endColumn":43},{"ruleId":"198","severity":1,"message":"237","line":2,"column":16,"nodeType":"200","messageId":"201","endLine":2,"endColumn":24},{"ruleId":"227","severity":1,"message":"228","line":8,"column":29,"nodeType":"229","messageId":"230","endLine":8,"endColumn":31},{"ruleId":"198","severity":1,"message":"205","line":9,"column":11,"nodeType":"200","messageId":"201","endLine":9,"endColumn":18},{"ruleId":"213","severity":1,"message":"238","line":19,"column":8,"nodeType":"215","endLine":19,"endColumn":21,"suggestions":"239"},{"ruleId":"198","severity":1,"message":"240","line":1,"column":16,"nodeType":"200","messageId":"201","endLine":1,"endColumn":23},{"ruleId":"198","severity":1,"message":"199","line":5,"column":9,"nodeType":"200","messageId":"201","endLine":5,"endColumn":24},{"ruleId":"198","severity":1,"message":"241","line":6,"column":21,"nodeType":"200","messageId":"201","endLine":6,"endColumn":27},{"ruleId":"198","severity":1,"message":"242","line":7,"column":23,"nodeType":"200","messageId":"201","endLine":7,"endColumn":35},{"ruleId":"198","severity":1,"message":"243","line":32,"column":7,"nodeType":"200","messageId":"201","endLine":32,"endColumn":23},{"ruleId":"198","severity":1,"message":"244","line":160,"column":36,"nodeType":"200","messageId":"201","endLine":160,"endColumn":41},{"ruleId":"198","severity":1,"message":"245","line":160,"column":43,"nodeType":"200","messageId":"201","endLine":160,"endColumn":49},{"ruleId":"227","severity":1,"message":"228","line":31,"column":33,"nodeType":"229","messageId":"230","endLine":31,"endColumn":35},{"ruleId":"198","severity":1,"message":"246","line":4,"column":7,"nodeType":"200","messageId":"201","endLine":4,"endColumn":22},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"no-unused-vars","'useStoreActions' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'authLoaded' is assigned a value but never used.","'history' is assigned a value but never used.","'profile' is assigned a value but never used.",["247"],["248"],"'useFirestoreConnect' is defined but never used.","'useStoreState' is defined but never used.","'useGroupWagers' is defined but never used.","'Link' is defined but never used.","'EventCell' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setJoinCode'. Either include it or remove the dependency array.","ArrayExpression",["249"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'SelectEvent' is defined but never used.","'ConfirmWagerProposal' is defined but never used.",["247"],["248"],"'computed' is defined but never used.","'Hits' is defined but never used.","'searchClient' is assigned a value but never used.","'MarketDescription' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has a missing dependency: 'updateEvents'. Either include it or remove the dependency array.",["250"],"'ButtonLink' is defined but never used.","'linkOptions' is assigned a value but never used.","'setValue' is assigned a value but never used.","'control' is assigned a value but never used.","'TitleRow' is defined but never used.","React Hook useEffect has a missing dependency: 'setActiveWager'. Either include it or remove the dependency array.",["251"],"'Outcome' is defined but never used.","'shadow' is defined but never used.","'SplashScreen' is defined but never used.","'EventDescription' is assigned a value but never used.","'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'getDeviceConfig' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},"Update the dependencies array to be: [setJoinCode, urlJoinCode]",{"range":"258","text":"259"},"Update the dependencies array to be: [events, updateEvents]",{"range":"260","text":"261"},"Update the dependencies array to be: [activeWager, setActiveWager]",{"range":"262","text":"263"},[1722,1735],"[setJoinCode, urlJoinCode]",[6276,6284],"[events, updateEvents]",[744,757],"[activeWager, setActiveWager]"]